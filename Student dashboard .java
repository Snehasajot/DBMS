// Import necessary packages for database and GUI functionality
import java.sql.*;          // JDBC API classes for database connection and queries
import javax.swing.*;       // Swing classes for GUI components like JFrame, JOptionPane, etc.

// Define the Login class that extends JFrame for GUI window
public class Login extends javax.swing.JFrame {

    // Declare variables to hold database connection, prepared statement, and query result
    Connection con;             // Represents connection to MySQL database
    PreparedStatement pst;      // Used to prepare SQL queries with parameters
    ResultSet rs;               // Holds results returned by executing SQL queries

    // Constructor: called when Login object is created
    public Login() {
        initComponents();      // Initialize GUI components (auto-generated by GUI builder)
        connectDB();           // Connect to the MySQL database
    }

    // Method to connect to MySQL database
    public void connectDB() {
        try {
            // Load the MySQL JDBC driver class dynamically
            Class.forName("com.mysql.cj.jdbc.Driver");

            // Establish connection to the database with URL, username and password
            con = DriverManager.getConnection(
                "jdbc:mysql://localhost:3306/college_lost_found", // MySQL DB URL
                "root",                                          // DB username
                "your_password"                                  // DB password (replace with real one)
            );
        } catch (Exception e) {
            // Show error popup if connection to DB fails
            JOptionPane.showMessageDialog(this, "Database Connection Failed: " + e.getMessage());
        }
    }

    // Event handler method for Login button click
    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {
        // Read user input from email and password fields
        String email = txtEmail.getText();                         // Email input field text
        String password = String.valueOf(txtPassword.getPassword()); // Password input as string

        try {
            // SQL query with placeholders to select user matching email and password
            String sql = "SELECT * FROM users WHERE email = ? AND password = ?";

            // Prepare the SQL statement to prevent SQL injection
            pst = con.prepareStatement(sql);

            // Set parameters in the prepared statement
            pst.setString(1, email);      // Set first placeholder (?) to email
            pst.setString(2, password);   // Set second placeholder (?) to password

            // Execute the query and get the results
            rs = pst.executeQuery();

            // Check if user exists with given credentials
            if (rs.next()) {
                // User found, retrieve user details from result set
                String role = rs.getString("role");       // User's role: student/faculty/admin
                String name = rs.getString("name");       // User's full name
                int userId = rs.getInt("user_id");        // User's unique ID from database

                // Show welcome message with user's name and role
                JOptionPane.showMessageDialog(this, "Welcome " + name + " (" + role + ")");

                // Redirect user to appropriate dashboard based on role, passing userId if needed
                switch (role) {
                    case "student":
                        new StudentDashboard(userId).setVisible(true);  // Open student dashboard with userId
                        break;
                    case "faculty":
                        new FacultyDashboard().setVisible(true);        // Open faculty dashboard (modify if passing userId)
                        break;
                    case "admin":
                        new AdminDashboard().setVisible(true);          // Open admin dashboard (modify if passing userId)
                        break;
                }

                // Close login window after successful login
                this.dispose();

            } else {
                // No matching user found - show error message on the form
                lblMessage.setText("Invalid email or password.");
            }

        } catch (SQLException ex) {
            // Show error popup if SQL query or connection fails
            JOptionPane.showMessageDialog(this, "Login Failed: " + ex.getMessage());
        }
    }

    // Other methods and GUI components initialization (initComponents) go here...
}
